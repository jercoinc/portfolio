{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","formatLaunchSuccess","input","getManifest","payLoadArray","manfestStore","i","length","tempManifest","cargo_manifest","undefined","react_default","a","createElement","ReactHtmlParser","payloadTotal","lbsTotal","payload_mass_lbs","toFixed","displayRank","data","rankList","state","rankData","rankValue","rankId","lbs","getRank","lbsRankArr","counter","lbsRankItem","flight_number","pCounter","rocket","second_stage","payloads","Number","push","sort","b","formatDateTime","dateTimeParm","dtChange","Date","fixedMonth","getMonth","getDate","getFullYear","getHours","getMinutes","fetch","response","json","rankArray","setState","rowData","_this2","loading","className","id","buildListHeader","map","flight","Fragment","key","launch_date_utc","mission_name","rocket_name","launch_success","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a520f0e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport ReactHtmlParser, {\n  processNodes,\n  convertNodeToElement,\n  htmlparser2\n} from \"react-html-parser\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  async componentDidMount() {\n    const url = \"https://api.spacexdata.com/v3/launches\";\n    const response = await fetch(url);\n    let data = await response.json();\n    // Sort before setting to state\n    data.sort((a, b) => b.flight_number - a.flight_number);\n    // Build Rank Array\n    const rankArray = this.getRank(data);\n    // Put SpaceX and Rank data in state.\n    this.setState({ rowData: data, rankData: rankArray });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <div>Loading Api Data...</div>;\n    }\n\n    if (!this.state.rowData) {\n      return <div>No data returned from api</div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <table id=\"SpaceXData\">\n          <thead>{this.buildListHeader()}</thead>\n          <tbody>\n            {this.state.rowData.map(flight => (\n              <React.Fragment key={flight.flight_number}>\n                <tr>\n                  <td>{this.formatDateTime(flight.launch_date_utc)}</td>\n                  <td>{flight.flight_number}</td>\n                  <td>{flight.mission_name}</td>\n                  <td>{flight.rocket.rocket_name}</td>\n                  <td>{this.formatLaunchSuccess(flight.launch_success)}</td>\n                  <td>\n                    {this.payloadTotal(flight.rocket.second_stage.payloads)}\n                  </td>\n                  <td>{this.displayRank(flight.flight_number)}</td>\n                  <td>\n                    {this.getManifest(flight.rocket.second_stage.payloads)}\n                  </td>\n                </tr>\n              </React.Fragment>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  buildListHeader() {\n    // Display Header\n    return (\n      <tr>\n        <th>Launch Date - Time</th>\n        <th>Flight Number</th>\n        <th>Mission Name</th>\n        <th>Rocket Name</th>\n        <th>Launch Status</th>\n        <th>Payload Mass lbs</th>\n        <th>Payload Rank</th>\n        <th>Cargo Manifest</th>\n      </tr>\n    );\n  }\n\n  formatLaunchSuccess = input => {\n    if (input === true) {\n      return \"Successful\";\n    } else if (input === false) {\n      return \"Failure\";\n    } else {\n      return \"Not Launched\";\n    }\n  };\n\n  getManifest = payLoadArray => {\n    let manfestStore = \"\";\n    for (let i = 0; i < payLoadArray.length; i++) {\n      let tempManifest = payLoadArray[i].cargo_manifest;\n      if (tempManifest === null || tempManifest === undefined) {\n        manfestStore += \"M-\" + (i + 1) + \" Not Available<br />\";\n      } else {\n        manfestStore +=\n          \"<a href=\" +\n          tempManifest +\n          \" target='_blank'>View M-\" +\n          (i + 1) +\n          \"</a><br />\";\n      }\n    }\n\n    return <div>{ReactHtmlParser(manfestStore)}</div>;\n  };\n\n  payloadTotal = payLoadArray => {\n    let lbsTotal = 0;\n    for (let i = 0; i < payLoadArray.length; i++) {\n      lbsTotal += payLoadArray[i].payload_mass_lbs;\n    }\n\n    return lbsTotal.toFixed(3);\n  };\n\n  displayRank = data => {\n    const rankList = this.state.rankData;\n    let rankValue = \"Not Ranked\" + rankList.length;\n\n    for (let i = 0; i < rankList.length; i++) {\n      if (rankList[i].rankId === data) {\n        if (rankList[i].lbs === 0) {\n          rankValue = \"Not Ranked\";\n        } else {\n          rankValue = i + 1;\n        }\n\n        break;\n      }\n    }\n    return rankValue;\n  };\n\n  getRank = data => {\n    let lbsRankArr = [];\n    for (let counter = 0; counter < data.length; counter++) {\n      let lbsRankItem = { rankId: data[counter].flight_number, lbs: 0 };\n      for (\n        let pCounter = 0;\n        pCounter < data[counter].rocket.second_stage.payloads.length;\n        pCounter++\n      ) {\n        lbsRankItem.lbs += Number(\n          data[counter].rocket.second_stage.payloads[pCounter].payload_mass_lbs\n        );\n      }\n      lbsRankArr.push(lbsRankItem);\n    }\n    lbsRankArr.sort((a, b) => b.lbs - a.lbs); // descending order\n\n    return lbsRankArr;\n  };\n\n  formatDateTime = dateTimeParm => {\n    let dtChange = new Date(dateTimeParm);\n    // getMonth is zero based - This fixes it.\n    let fixedMonth = dtChange.getMonth() + 1;\n    let cMonth = (fixedMonth < 10 ? \"0\" : \"\") + fixedMonth;\n    let cDay = (dtChange.getDate() < 10 ? \"0\" : \"\") + dtChange.getDate();\n    let cYear = dtChange.getFullYear();\n    let cHour = (dtChange.getHours() < 10 ? \"0\" : \"\") + dtChange.getHours();\n    let cMinutes =\n      (dtChange.getMinutes() < 10 ? \"0\" : \"\") + dtChange.getMinutes();\n\n    return cMonth + \"/\" + cDay + \"/\" + cYear + \" - \" + cHour + \":\" + cMinutes;\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}